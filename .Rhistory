install.packages("slidify")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("GenomicFeatures", "AnnotationDbi"))
library(ggplot2)
search()
find.package("devtools")
install.package("devtools")
install.packages("devtools")
find_rtools()
library9devtools)
library(devtools)
find_rtools
library("devtools")
find_rtools()
cat('Hello Coursera!\n')
cat('Hello, Coursera!\nI am  Kevin B...\...and this is part of my course project for\nThe Data Scientist’s Toolbox\n ')
cat('Hello, Coursera!\nI am  Kevin B...\n...and this is part of my course project for\nThe Data Scientist’s Toolbox\n ')
cat('\n\n\nHello, Coursera!\nI am  Kevin B...\n...and this is part of my course project for\nThe Data Scientist’s Toolbox\n ')
date
date()
library("swirl")
swirl()
my_vector <- [1:20]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating","test")
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 ==7
6<7
10<=10
5 != 7
!(5==7)
!5==7
false & false
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
swirl()
cube <- function(x, n) {}
cube <- function(x, n) {x^3}
cube(3)
x <- 1:10
if(x > 5){x <- 0}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f(3)
x <- 5
y <- if(x<3){NA}
else{10}
clear
x <- 5
y <- if(x<3){
NA
}
y <- if(x<3){
NA
}else{}
y <- if(x<3){
NA
}else{10}
library("swirl")
library("swirl")
swirl()
head(flags)
dim(flags)
help()
info()
play()
viewinfo9flags)
viewinfo(flags)
viewinfo()
nxt()
class(flags)
play()
as.list(flags)
nxt()
cls_list<-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$landmass, mean)
tapply(flages$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
name(plants)
names(plants)
head(plants)
?head
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
install.packages("httr")
install.packages("httpuv")
?install.packages
?.libpaths
?libpaths
?rporfile
rprofile
?rprofile
?Rprofile
library(httr)
install.packages("httpuv")
?InternetOpenUrl
install.packages("httpuv" repos="http://cran.stat.sfu.ca/")
install.packages("httpuv", repos="http://cran.stat.sfu.ca/")
install.packages("httr", repos="http://cran.stat.sfu.ca/")
install.packages("httr", repos = "http://cran.stat.sfu.ca/")
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
my app <- oauth_app("github",key="82b713ab8c7ad9e19c92",secret = "fa03cf0dcf080ac93b8fd163ffee6bd230f05860")
myapp <- oauth_app("github",key="82b713ab8c7ad9e19c92",secret = "fa03cf0dcf080ac93b8fd163ffee6bd230f05860")
github_token <- oauth2.0_token((oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(github, myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
package(httpuv)
library(httpuv)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
install.package("rjson", repos="http://cran.stat.sfu.ca/")
install.packages("rjson", repos="http://cran.stat.sfu.ca/")
install.packages("rjsonlite", repos="http://cran.stat.sfu.ca/")
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
install.packages("rjsonio", repos="http://cran.stat.sfu.ca/")
install.packages("RJSONIO", repos="http://cran.stat.sfu.ca/")
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
view(jsondata)
jsondata
View(jsonData)
jsonData[datasharing]
jsonData[[datasharing]]
jsonData["datasharing"]
jsonData$datasharing
df <- jsonData$name="datasharing"
subset(jsonData, name="datasharing")
subset(jsonData, name="datasharing", select="created_at")
subset(jsonData, name="datasharing", select=c("name","created_at")
)
data(iris)
?str
str(iris)
summary(iris)
plot(iris$Petal.Length, iris$Petal.Width, type="n")
points(iris$Petal.Length, iris$Petal.Width, pch=19, col=iris$Species)
clear()
library(downloader)
install.packages(downloader)
install.packages("downloader")
library(downloader)
download("https://raw.githubusercontent.com/thoughtfulbloke/faoexample/master/appleorange.csv", destfile="appleorange.csv")
download("https://raw.githubusercontent.com/thoughtfulbloke/faoexample/master/stability.csv", destfile="stability.csv")
ao <- read.csv("appleorange.csv")
atr(ao)
str(ao)
aoraw <- read.csv("appleorange.csv", stringsAsFactors=FALSE, header=FALSE)
head(aoraw)
tail(aoraw)
aodata <- aoraw[3:700,]
names(aodata) <- c("country", "countrynumber", "products", "productnumber", "tonnes", "year")
data$countrynumber <- as.integer(aodata$countrynumber)
ucscDb <- dbConnext(MySQL(), user="genome",host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(), user="genome",host="genome-mysql.cse.ucsc.edu")
install.packages("Rtools")
install.packages("RMySQL")
install.packages("sqldf")
restart
install.packages("RMySQL",type ="source")
source("thhp://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathsApply(html, "//title",xmlValue)
xpathSApply(html, "//title",xmlValue)
xpathSApply(html, "//td[@id='col-citeby']",xmlValue)
library(httr)
library(httpuv)
oauth_endpoints("github")
myapp<-oauth_app("github","82b713ab8c7ad9e19c92")
?oauth_app
myapp<-oauth_app("github","82b713ab8c7ad9e19c92", secret="fa03cf0dcf080ac93b8fd163ffee6bd230f05860")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <-config(token = github_token)
req<- GET("https://api.github.com/rate_limit",gtoken)
stop_for_status(req)
content(req)
req<- GET("https://api.github.com/users/jtleek/repos",gtoken)
stop_for_status(req)
content(req)
str(req)
jsoned <-fromJSON(req)
library(JSON)
library(jsonlite)
jsoned <-fromJSON(req)
jsoned <-fromJSON(toJSON(req))
content(req)
head(req)
jsoned <-fromJSON(toJSON(req))
?toJSON
str(req)
names(req)
req$date
jsoned <-toJSON(req)
library(rjsonio)
library(RJSONIO)
jsoned <-fromJSON(toJSON(req))
str(req)
summary(req)
req$url
req$headers
output <- content(req)
str(output)
names(output)
summary(output)
output[[4]]$created_at
list(output[[4]]$name,output[[4]]$created_at)
list(output[[5]]$name,output[[5]]$created_at)
output$name=="datasharing"
source("plot1.R")
setwd("~/sandbox/Exploratory-Data-Analysis/ExData_Plotting2")
source("plot1.R")
source("plot1.R")
source("plot1.R")
source("plot1.R")
source("plot1.R")
summary(NEI)
View(NEI)
View(NEI)
View(SCC)
?ddply
library("plyr")
?ddply
source("plot1.R")
source("plot1.R")
source("plot1.R")
View(yearly_emissions)
plot(yearly_emissions)
?plot
with(yearly_emissions,plot(x=year,y=total))
with(yearly_emissions,plot(x=year,y=total/1000,))
with(yearly_emissions,plot(x=year,y=total/1000,xlab="Year",ylab="Emissions (kiloton"))
with(yearly_emissions,plot(x=year,y=total/1000,xlab="Year",ylab="Emissions (kiloton)")
)
with(yearly_emissions,plot(x=year,y=total/1000,xlab="Year",ylab="Emissions (kiloton)"))
with(yearly_emissions,plot(x=year,y=total/1000,type = "bl",xlab="Year",ylab="Emissions (kiloton)"))
with(yearly_emissions,plot(x=year,y=total/1000,type = "b",xlab="Year",ylab="Emissions (kiloton)"))
with(yearly_emissions,plot(x=year,y=total/1000,type = "b",main="Total Emissions by Year", xlab="Year",ylab="Emissions (kiloton)"))
source("plot1.R")
